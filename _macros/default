# Auto-generated file - MODIFY AT YOUR OWN RISK
SolarModel = set_as_top(create("openmdao.main.assembly.Assembly"))
SolarModel.add("sm", create("Energy.Sources.Solar.Solar.SolarModel"))
SolarModel.replace("driver", create("openmdao.lib.drivers.doedriver.DOEdriver"))
SolarModel.driver.add_parameter('sm.batteryCost',low=1,high=20);
SolarModel.driver.add_parameter('sm.circuitLoss',low=.1,high=.4);
SolarModel.driver.add_parameter('sm.panelEff',low=.8,high=.98);
SolarModel.driver.add_parameter('sm.panelRating',low=.5,high=.6);
SolarModel.driver.add_parameter('sm.solarCostPerWatt',low=.5,high=.8);
SolarModel.driver.add_parameter('sm.sunRadianceScalar',low=.9,high=1.2);
SolarModel.driver.add("DOEgenerator", create("openmdao.lib.doegenerators.full_factorial.FullFactorial", num_levels=4))
SolarModel.driver.recorders.append(create("openmdao.lib.casehandlers.csvcase.CSVCaseRecorder"))
SolarModel.set(u'driver.case_outputs', ['sm.totalkWh','sm.solarCapitalCost'])
SolarModel.set(u'driver.case_outputs', ['sm.totalkWh'])
SolarModel.driver.clear_parameters();
SolarModel.driver.add_parameter('sm.panelEff',low=.15,high=.45);
SolarModel.driver.add_parameter('sm.solarCostPerWatt',low=.05,high=3.00);
SolarModel.driver.add_parameter('sm.surfaceArea',low=100,high=1000);
SolarModel.driver.add_parameter('sm.panelRating',low=200,high=350);
SolarModel.driver.add_parameter('sm.sunRadianceScalar',low=.9,high=1.1);
SolarModel.driver.add_parameter('sm.batteryCost',low=1,high=1);
SolarModel.driver.add_parameter('sm.circuitLoss',low=.7,high=.95);
SolarModel.set(u'driver.case_outputs', ['sm.totalkWh','sm.solarCapitalCost'])
UncertaintyTester = set_as_top(create("openmdao.main.assembly.Assembly"))
UncertaintyTester.add("um", create("Uncertainties.Uncertainties.UncertaintiesModel"))
UncertaintyTester.replace("driver", create("openmdao.lib.drivers.doedriver.DOEdriver"))
UncertaintyTester.driver.add("DOEgenerator", create("openmdao.lib.doegenerators.optlh.OptLatinHypercube", num_samples=50, population=100, generations=100))
UncertaintyTester.driver.add_parameter('um.pedsPerHourOff_prob',low=0,high=1);
UncertaintyTester.driver.add_parameter('um.pedsPerHourOn_prob',low=0,high=1);
UncertaintyTester.set(u'driver.reload_model', False)
UncertaintyTester.driver.recorders.append(create("openmdao.lib.casehandlers.csvcase.CSVCaseRecorder"))
UncertaintyTester.set(u'driver.case_outputs', ['um.pedsPerHourOn','um.pedsPerHourOff'])
UncertaintyTester.driver.remove('DOEgenerator')
UncertaintyTester.driver.add("DOEgenerator", create("openmdao.lib.doegenerators.optlh.OptLatinHypercube", num_samples=10, population=10, generations=2))
WindModelTester = set_as_top(create("openmdao.main.assembly.Assembly"))
WindModelTester.add("wm", create("Energy.Sources.Wind.Wind.WindModel"))
UncertaintyTester.driver.remove('DOEgenerator')
UncertaintyTester.driver.add("DOEgenerator", create("openmdao.lib.doegenerators.optlh.OptLatinHypercube", num_samples=1000, population=20, generations=5))
UncertaintyTester.driver.remove('DOEgenerator')
UncertaintyTester.driver.add("DOEgenerator", create("openmdao.lib.doegenerators.optlh.OptLatinHypercube", num_samples=1000, population=10, generations=2))
UncertaintyTester.driver.remove('DOEgenerator')
UncertaintyTester.driver.add("DOEgenerator", create("openmdao.lib.doegenerators.optlh.OptLatinHypercube", num_samples=50, population=5, generations=2))
Test = set_as_top(create("openmdao.lib.drivers.doedriver.DOEdriver"))
del(Test)
Test = set_as_top(create("openmdao.main.assembly.Assembly"))
Test.replace("driver", create("openmdao.lib.drivers.genetic.Genetic"))
del(Test)
Test = set_as_top(create("openmdao.main.problem_formulation.ArchitectureAssembly"))
del(Test)
GeorgiaAquarium = set_as_top(create("openmdao.main.assembly.Assembly"))
del(GeorgiaAquarium)
GeorgiaAquariumOptimizer = set_as_top(create("openmdao.main.assembly.Assembly"))
GeorgiaAquarium = set_as_top(create("openmdao.main.assembly.Assembly"))
GeorgiaAquarium.add("sm", create("Energy.Sources.Solar.Solar.SolarModel"))
GeorgiaAquarium.add("tb", create("Energy.Sources.Tribo.Tribo.TriboModel"))
GeorgiaAquarium.add("wm", create("Energy.Sources.Wind.Wind.WindModel"))
GeorgiaAquarium.add("cm", create("Cost.Cost.CostModel"))
GeorgiaAquarium.add("ovm", create("Energy.Sinks.Exhibits.OceanVoyager.OceanVoyager.OceanVoyagerModel"))
GeorgiaAquarium.add("SolarAssembly", create("openmdao.main.assembly.Assembly"))
GeorgiaAquarium.SolarAssembly.add("sm", create("Energy.Sources.Solar.Solar.SolarModel"))
GeorgiaAquarium.connect("sm.solarCapitalCost","cm.solarCapitalCost")
GeorgiaAquarium.connect("sm.totalkWh","cm.yearlyPowerProducedSolar")
GeorgiaAquarium.connect("ovm.hydraulicCapitalCost","cm.hydraulicCapitalCost")
GeorgiaAquarium.connect("ovm.totalPowerUsed","cm.hydraulicPowerUse")
GeorgiaAquarium.remove("SolarAssembly")
GeorgiaAquarium.connect("tb.totalkWh","cm.yearlyPowerProducedTribo")
GeorgiaAquarium.connect("tb.triboCapitalCost","cm.triboCapitalCost")
GeorgiaAquarium.connect("wm.totalkWh","cm.yearlyPowerProducedWind")
GeorgiaAquarium.connect("wm.windCapitalCost","cm.windCapitalCost")
_ = GeorgiaAquarium.create_passthrough('cm.baselineOceanVoyPowerUse')
_ = GeorgiaAquarium.create_passthrough('cm.baselineTotalPowerUse')
_ = GeorgiaAquarium.create_passthrough('cm.elecUtilityRate')
_ = GeorgiaAquarium.create_passthrough('wm.airDensity')
_ = GeorgiaAquarium.create_passthrough('wm.bladeLength')
_ = GeorgiaAquarium.create_passthrough('wm.circuitLoss')
_ = GeorgiaAquarium.create_passthrough('wm.turbineCount')
_ = GeorgiaAquarium.create_passthrough('wm.turbineEff')
_ = GeorgiaAquarium.create_passthrough('wm.turbineRating')
_ = GeorgiaAquarium.create_passthrough('wm.windCostPerWatt')
_ = GeorgiaAquarium.create_passthrough('wm.windSpeedScalar')
_ = GeorgiaAquarium.create_passthrough('sm.batteryCost')
_ = GeorgiaAquarium.create_passthrough('sm.panelEff')
_ = GeorgiaAquarium.create_passthrough('sm.panelRating')
_ = GeorgiaAquarium.create_passthrough('sm.solarCostPerWatt')
_ = GeorgiaAquarium.create_passthrough('sm.sunRadianceScalar')
_ = GeorgiaAquarium.create_passthrough('sm.surfaceArea')
_ = GeorgiaAquarium.create_passthrough('tb.mgtTileUnitCost')
_ = GeorgiaAquarium.create_passthrough('tb.pedStepsPerTile')
_ = GeorgiaAquarium.create_passthrough('tb.tileCount')
_ = GeorgiaAquarium.create_passthrough('tb.tileEff')
_ = GeorgiaAquarium.create_passthrough('tb.tileUnitCost')
_ = GeorgiaAquarium.create_passthrough('tb.tilekWh')
_ = GeorgiaAquarium.create_passthrough('ovm.lossMultiplier')
_ = GeorgiaAquarium.create_passthrough('ovm.ratedEff')
_ = GeorgiaAquarium.create_passthrough('ovm.ratedFlow')
_ = GeorgiaAquarium.create_passthrough('ovm.ratedHead')
_ = GeorgiaAquarium.create_passthrough('ovm.ratedSpeed')
_ = GeorgiaAquarium.create_passthrough('ovm.referenceArea')
_ = GeorgiaAquarium.create_passthrough('ovm.runSpeed')
_ = GeorgiaAquarium.create_passthrough('cm.breakEvenYear')
_ = GeorgiaAquarium.create_passthrough('cm.originalEnergyCost')
_ = GeorgiaAquarium.create_passthrough('cm.totalEnergyCost')
_ = GeorgiaAquarium.create_passthrough('cm.totalEnergySaved')
_ = GeorgiaAquarium.create_passthrough('cm.totalInitialInvestment')
_ = GeorgiaAquarium.create_passthrough('cm.totalPowerConsumed')
_ = GeorgiaAquarium.create_passthrough('cm.totalPowerProduced')
_ = GeorgiaAquarium.create_passthrough('cm.totalUtility')
_ = GeorgiaAquarium.create_passthrough('cm.year10Roi')
_ = GeorgiaAquarium.create_passthrough('cm.year1Roi')
_ = GeorgiaAquarium.create_passthrough('cm.year20Roi')
_ = GeorgiaAquarium.create_passthrough('cm.year30Roi')
_ = GeorgiaAquarium.create_passthrough('cm.year5Roi')
_ = GeorgiaAquarium.create_passthrough('ovm.headOut')
_ = GeorgiaAquarium.create_passthrough('ovm.totalFlow')
GeorgiaAquarium.driver.workflow.add("ovm", check=True)
GeorgiaAquarium.driver.workflow.add("tb", check=True)
GeorgiaAquarium.driver.workflow.add("sm", check=True)
GeorgiaAquarium.driver.workflow.add("wm", check=True)
GeorgiaAquarium.driver.workflow.add("cm", check=True)
CostTester = set_as_top(create("openmdao.main.assembly.Assembly"))
CostTester.add("cm", create("Cost.Cost.CostModel"))
CostTester.driver.workflow.add("cm", check=True)
GeorgiaAquarium.add("ped", create("Pedestrian.Pedestrian.PedestrianModel"))
GeorgiaAquarium.remove("ped")
GeorgiaAquarium.add("pm", create("Pedestrian.Pedestrian.PedestrianModel"))
_ = GeorgiaAquarium.remove('pedStepsPerTile')
_ = GeorgiaAquarium.create_passthrough('pm.pedsPerHourOff')
_ = GeorgiaAquarium.create_passthrough('pm.pedsPerHourOn')
GeorgiaAquarium.connect("pm.yearlyStepsPerTile","tb.pedStepsPerTile")
GeorgiaAquarium.add("tma", create("openmdao.main.assembly.Assembly"))
GeorgiaAquarium.remove("tma")
GeorgiaAquariumAssembly = set_as_top(create("openmdao.main.assembly.Assembly"))
GeorgiaAquariumAssembly.add("sma", create("openmdao.main.assembly.Assembly"))
GeorgiaAquariumAssembly.sma.add("sm", create("Energy.Sources.Solar.Solar.SolarModel"))
_ = GeorgiaAquariumAssembly.sma.create_passthrough('sm.batteryCost')
_ = GeorgiaAquariumAssembly.sma.create_passthrough('sm.circuitLoss')
_ = GeorgiaAquariumAssembly.sma.create_passthrough('sm.panelEff')
_ = GeorgiaAquariumAssembly.sma.create_passthrough('sm.panelRating')
_ = GeorgiaAquariumAssembly.sma.create_passthrough('sm.solarCostPerWatt')
_ = GeorgiaAquariumAssembly.sma.create_passthrough('sm.sunRadianceScalar')
_ = GeorgiaAquariumAssembly.sma.create_passthrough('sm.surfaceArea')
_ = GeorgiaAquariumAssembly.sma.create_passthrough('sm.solarCapitalCost')
_ = GeorgiaAquariumAssembly.sma.create_passthrough('sm.totalkWh')
_ = GeorgiaAquariumAssembly.create_passthrough('sma.batteryCost')
_ = GeorgiaAquariumAssembly.create_passthrough('sma.circuitLoss')
_ = GeorgiaAquariumAssembly.create_passthrough('sma.panelEff')
GeorgiaAquarium.driver.workflow.remove('sm')
GeorgiaAquarium.driver.workflow.remove('tb')
GeorgiaAquarium.driver.workflow.remove('wm')
GeorgiaAquarium.driver.workflow.remove('cm')
GeorgiaAquarium.add("ovdriver", create("openmdao.main.driver.Run_Once"))
GeorgiaAquarium.remove("ovdriver")
GeorgiaAquarium.driver.workflow.add("pm", check=True)
GeorgiaAquarium.driver.workflow.add("tb", check=True)
GeorgiaAquarium.driver.workflow.add("sm", check=True)
GeorgiaAquarium.driver.workflow.add("wm", check=True)
GeorgiaAquarium.driver.workflow.add("cm", check=True)
GeorgiaAquariumSampler = set_as_top(create("openmdao.main.assembly.Assembly"))
ga = set_as_top(create("GeorgiaAquarium.GeorgiaAquarium"))
del(ga)
GeorgiaAquariumSampler.add("ga", create("GeorgiaAquarium.GeorgiaAquarium"))
GeorgiaAquariumSampler.add("um", create("Uncertainties.Uncertainties.UncertaintiesModel"))
GeorgiaAquariumSampler.connect("um.pedsPerHourOff","ga.pedsPerHourOff")
GeorgiaAquariumSampler.connect("um.pedsPerHourOn","ga.pedsPerHourOn")
GeorgiaAquariumSampler.replace("driver", create("openmdao.lib.drivers.doedriver.DOEdriver"))
GeorgiaAquariumSampler.set(u'driver.reload_model', False)
GeorgiaAquariumSampler.set(u'driver.sequential', False)
GeorgiaAquariumSampler.driver.add("DOEgenerator", create("openmdao.lib.doegenerators.optlh.OptLatinHypercube", num_samples=50, population=10, generations=2))
GeorgiaAquariumSampler.add("ra", create("Common.RunAggregator.RunAggregator.RunAggregator"))
GeorgiaAquariumSampler.driver.add_parameter('um.pedsPerHourOff_prob',low=0,high=1);
GeorgiaAquariumSampler.driver.add_parameter('um.pedsPerHourOn_prob',low=0,high=1);
GeorgiaAquariumSampler.driver.workflow.add("ga", check=True)
GeorgiaAquariumSampler.driver.workflow.add("um", check=True)
GeorgiaAquariumSampler.connect("ga.breakEvenYear","ra.breakEvenYearSamp")
GeorgiaAquariumSampler.connect("ga.headOut","ra.headOutSamp")
GeorgiaAquariumSampler.connect("ga.originalEnergyCost","ra.originalEnergyCostSamp")
GeorgiaAquariumSampler.connect("ga.totalEnergyCost","ra.totalEnergyCostSamp")
GeorgiaAquariumSampler.connect("ga.totalEnergySaved","ra.totalEnergySavedSamp")
GeorgiaAquariumSampler.connect("ga.totalFlow","ra.totalFlowSamp")
GeorgiaAquariumSampler.connect("ga.totalInitialInvestment","ra.totalInitialInvestmentSamp")
GeorgiaAquariumSampler.connect("ga.totalPowerConsumed","ra.totalPowerConsumedSamp")
GeorgiaAquariumSampler.connect("ga.totalPowerProduced","ra.totalPowerProducedSamp")
GeorgiaAquariumSampler.connect("ga.totalUtility","ra.totalUtilitySamp")
GeorgiaAquariumSampler.connect("ga.year10Roi","ra.year10RoiSamp")
GeorgiaAquariumSampler.connect("ga.year1Roi","ra.year1RoiSamp")
GeorgiaAquariumSampler.connect("ga.year20Roi","ra.year20RoiSamp")
GeorgiaAquariumSampler.connect("ga.year30Roi","ra.year30RoiSamp")
GeorgiaAquariumSampler.connect("ga.year5Roi","ra.year5RoiSamp")
GeorgiaAquariumSampler.driver.workflow.add("ra", check=True)
test = set_as_top(create("Common.RunAggregator.RunAggregator.RunAggregator"))
del(test)
GeorgiaAquariumSampler.set(u'driver.record_doe', False)
GeorgiaAquariumSampler.set(u'driver.case_outputs', ['um.pedsPerHourOff_prop'])
GeorgiaAquariumSampler.set(u'driver.case_outputs', ['um.pedsPerHourOff_prob'])
GeorgiaAquariumSampler.driver.recorders.append(create("openmdao.lib.casehandlers.csvcase.CSVCaseRecorder"))
GeorgiaAquariumSampler.set(u'driver.reload_model', True)
GeorgiaAquariumSampler.set(u'driver.sequential', True)
GeorgiaAquariumSampler.set(u'driver.sequential', False)
GeorgiaAquariumSampler.set(u'driver.sequential', True)
del GeorgiaAquariumSampler.driver.recorders[0]
gas = set_as_top(create("GeorgiaAquariumOptimizer.GeorgiaAquariumSampler"))
opt = set_as_top(create("openmdao.main.assembly.Assembly"))
opt.add("gas", create("GeorgiaAquariumOptimizer.GeorgiaAquariumSampler"))
opt.replace("driver", create("openmdao.lib.drivers.genetic.Genetic"))
gac = set_as_top(create("GeorgiaAquariumOptimizer.GeorgiaAquariumComponent"))
del(gas)
del(GeorgiaAquariumSampler)
del(GeorgiaAquariumAssembly)
del(GeorgiaAquarium)
opt.remove("gas")
opt.add("gac", create("GeorgiaAquariumOptimizer.GeorgiaAquariumComponent"))
opt.driver.add_objective('gac.totalUtilityMean');
opt.driver.add_parameter('gac.bladeLength',low=1,high=10);
opt.driver.add_parameter('gac.ratedEff',low=.7,high=.9);
opt.driver.add_parameter('gac.runSpeed',low=100,high=1800);
opt.set(u'driver.opt_type', 'maximize')
opt.set(u'driver.population_size', 20)
opt.set(u'driver.generations', 50)
import pyopt
import pyopt as pyOpt
opt.replace("driver", create("pyopt_driver.pyopt_driver.pyOptDriver"))
opt.set(u'driver.optimizer', 'NSGA2')
opt.driver.recorders.append(create("openmdao.lib.casehandlers.csvcase.CSVCaseRecorder"))
opt.set(u'driver.pyopt_diff', True)
quickopt = set_as_top(create("openmdao.main.assembly.Assembly"))
quickopt.add("ga", create("GeorgiaAquarium.GeorgiaAquarium"))
quickopt.replace("driver", create("pyopt_driver.pyopt_driver.pyOptDriver"))
quickopt.driver.recorders.append(create("openmdao.lib.casehandlers.csvcase.CSVCaseRecorder"))
quickopt.driver.add_parameter('ga.bladeLength',low=1,high=5);
quickopt.driver.add_parameter('ga.runSpeed',low=200,high=1800);
quickopt.driver.add_parameter('ga.tileCount',low=0,high=50);
quickopt.driver.add_objective('ga.totalUtility');
quickopt.set(u'driver.gradient_options.gmres_tolerance', 1e-6)
quickopt.set(u'driver.pyopt_diff', True)
opt.set(u'driver.optimizer', 'ALPSO')
opt.set(u'driver.gradient_options.gmres_tolerance', 1e-6)
opt.driver.add_parameter('gac.tileCount',low=0,high=20);
opt.set(u'driver.optimizer', 'ALHSO')
opt.driver.add_parameter('gac.turbineCount',low=0,high=10);
solarOpt = set_as_top(create("openmdao.main.assembly.Assembly"))
solarOpt.replace("driver", create("pyopt_driver.pyopt_driver.pyOptDriver"))
solarOpt.add("sm", create("Energy.Sources.Solar.Solar.SolarModel"))
solarOpt.driver.add_parameter('sm.batteryCost',low=0,high=0);
solarOpt.driver.add_parameter('sm.circuitLoss',low=0.7,high=0.7);
solarOpt.driver.add_parameter('sm.panelEff',low=.1,high=.25);
solarOpt.driver.add_parameter('sm.panelRating',low=100,high=450);
solarOpt.driver.add_parameter('sm.surfaceArea',low=100,high=1000);
solarOpt.driver.add_parameter('sm.sunRadianceScalar',low=1,high=1);
solarOpt.driver.add_parameter('sm.solarCostPerWatt',low=1.00,high=2.00);
solarOpt.driver.add_objective('sm.totalkWh');
solarOpt.driver.add_constraint('sm.solarCapitalCost < 400000');
solarOpt.set(u'driver.optimizer', 'NSGA2')
solarOpt.set(u'driver.optimizer', 'COBYLA')
solarOpt.driver.recorders.append(create("openmdao.lib.casehandlers.csvcase.CSVCaseRecorder"))
solarOpt.driver.remove_parameter("sm.batteryCost");
solarOpt.driver.remove_parameter("sm.circuitLoss");
solarOpt.driver.remove_parameter("sm.sunRadianceScalar");
solarOpt.set(u'driver.optimizer', 'ALPSO')
solarOpt.driver.remove_objective("sm.totalkWh");
solarOpt.driver.add_objective('sm.totalkWh >= 0');
solarOpt.driver.remove_objective("sm.totalkWh>=0");
solarOpt.driver.add_objective('sm.totalkWh');
solarOpt.set(u'driver.pyopt_diff', True)
solarOpt.set(u'driver.options', {"'Problem Type'":"'Maximize'"})
solarOpt.set(u'driver.options', {"'Problem Type'":"'Maximize'"})
solarOpt.set(u'driver.options', {})
solarOpt.set(u'driver.options', {"Problem Type":"Maximize"})
solarOpt.set(u'driver.options', {})
solarOpt.driver.remove_objective("sm.totalkWh");
solarOpt.driver.add_objective('+sm.totalkWh');
solarOpt.driver.remove_objective("+sm.totalkWh");
solarOpt.driver.add_objective('sm.totalkWh');
solarOpt.driver.remove_constraint("sm.solarCapitalCost<400000");
solarOpt.driver.add_constraint('400000 > sm.solarCapitalCost');
solarOpt.driver.remove_objective("sm.totalkWh");
solarOpt.driver.add_objective('-sm.totalkWh');
solarOpt.driver.remove_constraint("400000>sm.solarCapitalCost");
solarOpt.driver.add_constraint('sm.solarCapitalCost >= 400000');
solarOpt.driver.remove_constraint("sm.solarCapitalCost>=400000");
solarOpt.driver.add_constraint('-sm.solarCapitalCost < 400000');
solarOpt.driver.remove_constraint("-sm.solarCapitalCost<400000");
solarOpt.driver.add_constraint('sm.solarCapitalCost < 400000.0');
solarOpt.driver.remove_parameter("sm.solarCostPerWatt");
solarOpt.driver.remove_constraint("sm.solarCapitalCost<400000.0");
solarOpt.driver.add_constraint('400000.0 > sm.solarCapitalCost');
solarOpt.driver.remove_constraint("400000.0>sm.solarCapitalCost");
solarOpt.driver.add_constraint('sm.solarCapitalCost >= 400000.0',name='solarcost');
solarOpt.driver.remove_parameter("sm.surfaceArea");
solarOpt.driver.add_parameter('sm.surfaceArea',low=0,high=1000);
solarOpt.driver.remove_constraint("solarcost");
solarOpt.driver.add_constraint('sm.solarCapitalCost <= 400000.0',name='solarcost');
del(opt)
del(GeorgiaAquariumOptimizer)
del(SolarModel)
